Юнит тест (unit test) — это функция, проверяющая работу отдельной функции.

Ассерт (assert) — оператор для проверки истинности заданного утверждения.

Фикстура  (fixture) — функция, инициализирующая входные тестовые данные.

Тест раннер (test runner) — это приложение, которое выполняет  тестовый код, проверяет утверждения и выдает  результаты тестирования в консоли.


---- Зачем тестировать код? ----
Тестирование:
- повышает качество кода
- Локализует ошибки
- Дает уверенность в изменениях, которые сделал разработчик
- Ускоряет разработку

---- Уровни тестирования ----
- по уровню тестирования
Юнит тесты - тестирование каждой функции по отдельности $
Интеграционные тесты - проверка взаимодействия модулей с друг другом $$$
UI тесты - Проверка как пользователь взаимодействует с системой $$$$$$$$$
- по уровню знания системы
black box
grey box
white box
- по хронологии выполнения

---- Автоматические vs ручные тесты ----

Всё повторяющееся, рутинное, со сложными или краевыми условиями
- Дают воспроизводимый результат
- Быстры и эффективны
- Удобны для регрессионного тестирования
- Легко проверяют сложные и повторяющиеся сценарии

Всё, что требует субъективной оценки от человека
- Исследовательское тестирование
- Оценка пользовательского опыта



PyUnit — это фреймворк для модульного тестирования на языке Python

Включен в стандартную библиотеку Python под именем unittest


Тест

Тест-кейс — это блок кода, проверяющий
поведение определенной части системы

Тест-кейсы объединяются в тестовые
наборы (Test-Suits)

---- Функции PyUnit
- авто обнаружение тестов
- исполнение тестов
- тестовые фикстуры - setup teardown
- assertation-методы

Можно выбрать раннер

---- Использование PyUnit ----
- модуль с тестами должен начинаться со слова test

Нужно следовать двум правилам:
- объединять тестовые методы в тестовые классы
- использовать библиотечные assertation-методы вместо встроенных


---- В юнит тестах используется шаблон AAA
Arrange - задаём тестовые входные данные
Act - исполняем тестируемый код
Assert - сравниваем полученный результат и ожидаемый реультат

---- Основные assert
assertEqual - a == b
assertTrue - bool x is True
assertFalse - bool x is False
assertIs - a is b
assertIsNone - x is None
assertIn - a in b
assertIsInstance - isinstance (a, b)

assertAlmostEqual - сравнивает числа до 7 знака. Есть параметр places=7

---- test runner
Test Runner — это приложение, которое выполняет
тестовый код, проверяет утверждения и выдает
результаты тестирования в консоли

unittest.main()

Тест раннер обнаруживает все классы в этом файле,
которые наследуются от unittest.TestCase

Таке можно зупустить все тесты которые содержатся в проекте через команду
В каждой директории должен быть модуль __init__.py
python -m unittest
python -m unittest discover

Можно получить отчёт о покрытии в процентах
python -m coverage report



---- принципы хорошего тестирования
- один тест кейс проверяет одно условие. Иначе при падении теста будет сложнее определит где баг
- тест должен быть простым для понимания. Не иметь ветвлений и вложенных условий
- тест должен легко запускаться
- тесты должны быть независимы друг от друга
- тесты не дожны пересекаться


---- частые ошибки
- в имени теста нет действия или проверяемых условий
- слишком длинное имя тестового метода
-- структурные ошибки:
- методы содержат несколько assert
- много тестов в одном тестовом методе
- повторяется настройка тестовых методов

---- ненадёжные тесты:
- невоспроизводимые тесты - когда меняются входные тестовые данные
- использование asyncio.sleep() при тестировании асинхронного кода. На разных машинах выполняется с разной скоростью.
- изменение глобального состояния. Лучше их не использовать вовсе


















